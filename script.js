// JavaScript –¥–ª—è Telegram Mini App

const API_BASE = 'https://b6f1b3153b6f.ngrok-free.app';

class DreametechApp {
    constructor() {
        this.categories = {
            "roboty-pylesosy": { name: "ü§ñ –†–æ–±–æ—Ç—ã-–ø—ã–ª–µ—Å–æ—Å—ã", emoji: "ü§ñ" },
            "besprovodnye-pylesosy": { name: "üîã –ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –ø—ã–ª–µ—Å–æ—Å—ã", emoji: "üîã" },
            "moyushchie-pylesosy": { name: "üíß –ú–æ—é—â–∏–µ –ø—ã–ª–µ—Å–æ—Å—ã", emoji: "üíß" },
            "tekhnika-dlya-krasoty": { name: "üíÑ –¢–µ—Ö–Ω–∏–∫–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã", emoji: "üíÑ" },
            "air-purifiers": { name: "üå¨Ô∏è –û—á–∏—Å—Ç–∏—Ç–µ–ª–∏ –≤–æ–∑–¥—É—Ö–∞", emoji: "üå¨Ô∏è" }
        };
        
        this.currentCategory = null;
        this.currentProduct = null;
        this.products = [];
        
        this.init();
    }
    
    init() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
        if (window.Telegram && window.Telegram.WebApp) {
            window.Telegram.WebApp.ready();
            window.Telegram.WebApp.expand();
        }
        
        this.setupEventListeners();
        this.loadCategories();
    }
    
    setupEventListeners() {
        // –ü–æ–∏—Å–∫
        document.getElementById('searchBtn').addEventListener('click', () => {
            this.handleSearch();
        });
        
        document.getElementById('searchInput').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.handleSearch();
            }
        });
        
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        document.getElementById('backBtn').addEventListener('click', () => {
            this.showCategories();
        });
        
        document.getElementById('backToProductsBtn').addEventListener('click', () => {
            this.showProducts();
        });
    }
    
    async loadCategories() {
        try {
            this.showLoading();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            const response = await fetch(`${API_BASE}/api/categories`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const categoriesData = await response.json();
            
            this.renderCategories(categoriesData);
            this.hideLoading();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
            this.showError();
        }
    }
    
    renderCategories(categoriesData) {
        const grid = document.getElementById('categoriesGrid');
        grid.innerHTML = '';
        
        Object.entries(this.categories).forEach(([key, category]) => {
            const count = categoriesData[key] || 0;
            
            const card = document.createElement('div');
            card.className = 'category-card';
            card.innerHTML = `
                <span class="emoji">${category.emoji}</span>
                <div class="name">${category.name}</div>
                <div class="count">${count} —Ç–æ–≤–∞—Ä–æ–≤</div>
            `;
            
            card.addEventListener('click', () => {
                // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–≤–µ—Ä—Ö
                this.currentCategory = key;
                this.showProducts();
                this.scrollToTop();
                this.loadProducts(key);
            });
            
            grid.appendChild(card);
        });
    }
    
    async loadProducts(categoryKey) {
        try {
            this.showLoading();
            this.currentCategory = categoryKey;
            
            const response = await fetch(`${API_BASE}/api/products?category=${categoryKey}`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const products = await response.json();
            
            this.products = products;
            this.renderProducts(products);
            this.showProducts();
            this.hideLoading();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
            if (window.Telegram?.WebApp?.showAlert) {
                window.Telegram.WebApp.showAlert(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: ${error?.message || error}`);
            }
            this.showError();
        }
    }
    
    renderProducts(products) {
        const grid = document.getElementById('productsGrid');
        grid.innerHTML = '';
        
        if (products.length === 0) {
            grid.innerHTML = '<p style="text-align: center; color: var(--tg-theme-hint-color);">–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>';
            return;
        }
        
        products.forEach(async (product) => {
            const card = document.createElement('div');
            card.className = 'product-card';
            const imgUrl = await this.fetchProductImage(product.name, product.category);
            card.innerHTML = `
                ${imgUrl ? `<img src="${imgUrl}" alt="${this.escapeHtml(product.name)}" style="width:100%;height:auto;border-radius:12px;margin-bottom:10px;object-fit:cover;">` : ''}
                <div class="name">${this.escapeHtml(product.name)}</div>
                <div class="price">${this.escapeHtml(product.price)}</div>
                <div class="description">${this.formatDescription(product.description)}</div>
            `;
            
            card.addEventListener('click', () => {
                this.showProductDetails(product);
            });
            
            grid.appendChild(card);
        });
    }
    
    async showProductDetails(product) {
        try {
            this.showLoading();
            this.currentProduct = product;
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
            const response = await fetch(`${API_BASE}/api/product/${encodeURIComponent(product.name)}`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const productData = await response.json();
            
            this.renderProductDetails(productData);
            this.showProductDetailsView();
            this.hideLoading();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä–∞:', error);
            if (window.Telegram?.WebApp?.showAlert) {
                window.Telegram.WebApp.showAlert(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞: ${error?.message || error}`);
            }
            this.showError();
        }
    }
    
    renderProductDetails(product) {
        const title = document.getElementById('productTitle');
        const info = document.getElementById('productInfo');
        
        title.textContent = product.name;
        
        let specificationsHtml = '';
        if (product.specifications && Object.keys(product.specifications).length > 0) {
            specificationsHtml = `
                <div class="specifications">
                    <h3>üìã –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h3>
                    ${Object.entries(product.specifications).map(([key, value]) => `
                        <div class="spec-item">
                            <span class="spec-key">${this.escapeHtml(key)}</span>
                            <span class="spec-value">${this.escapeHtml(value)}</span>
                        </div>
                    `).join('')}
                </div>
            `;
        }
        
        info.innerHTML = `
            <div class="name">${this.escapeHtml(product.name)}</div>
            <div class="price">${this.escapeHtml(product.price)}</div>
            <div class="description">${this.formatDescription(product.description)}</div>
            ${specificationsHtml}
            <div class="url">
                <a href="${product.url}" target="_blank" rel="noopener noreferrer">
                    üîó –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ —Å–∞–π—Ç–µ Dreametech
                </a>
            </div>
        `;

        // –í—Å—Ç–∞–≤–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≤–µ—Ä—Ö—É, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        this.fetchProductImage(product.name, product.category).then((imgUrl) => {
            if (!imgUrl) return;
            const img = document.createElement('img');
            img.src = imgUrl;
            img.alt = product.name;
            img.style.width = '100%';
            img.style.height = 'auto';
            img.style.borderRadius = '16px';
            img.style.marginBottom = '16px';
            info.prepend(img);
        });
    }
    
    async handleSearch() {
        const query = document.getElementById('searchInput').value.trim();
        if (!query) return;
        
        try {
            this.showLoading();
            
            const response = await fetch(`${API_BASE}/api/search?q=${encodeURIComponent(query)}`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const results = await response.json();
            
            this.renderProducts(results);
            this.showProducts();
            this.hideLoading();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
            if (window.Telegram?.WebApp?.showAlert) {
                window.Telegram.WebApp.showAlert(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${error?.message || error}`);
            }
            this.showError();
        }
    }
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
    showCategories() {
        const cat = document.getElementById('categoriesSection');
        const prod = document.getElementById('productsSection');
        const details = document.getElementById('productDetails');
        const search = document.getElementById('searchInput');
        if (cat) cat.style.display = 'block';
        if (prod) prod.style.display = 'none';
        if (details) details.style.display = 'none';
        if (search) search.value = '';
    }
    
    showProducts() {
        const cat = document.getElementById('categoriesSection');
        const prod = document.getElementById('productsSection');
        const details = document.getElementById('productDetails');
        if (cat) cat.style.display = 'none';
        if (prod) prod.style.display = 'block';
        if (details) details.style.display = 'none';
        
        const categoryTitle = document.getElementById('categoryTitle');
        if (this.currentCategory) {
            categoryTitle.textContent = this.categories[this.currentCategory].name;
        }

        // –í—Å–µ–≥–¥–∞ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–≤–µ—Ä—Ö –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
        this.scrollToTop();
    }
    
    showProductDetailsView() {
        const cat = document.getElementById('categoriesSection');
        const prod = document.getElementById('productsSection');
        const details = document.getElementById('productDetails');
        if (cat) cat.style.display = 'none';
        if (prod) prod.style.display = 'none';
        if (details) details.style.display = 'block';
        this.scrollToTop();
    }
    
    // –£—Ç–∏–ª–∏—Ç—ã
    showLoading() {
        const el = document.getElementById('loading');
        if (el) el.style.display = 'block';
    }
    
    hideLoading() {
        const el = document.getElementById('loading');
        if (el) el.style.display = 'none';
    }
    
    showError() {
        const el = document.getElementById('error');
        if (el) el.style.display = 'block';
        this.hideLoading();
    }

    scrollToTop() {
        try {
            window.scrollTo({ top: 0, behavior: 'smooth' });
            if (window.Telegram?.WebApp?.MainButton) {
                // –ù–µ–±–æ–ª—å—à–æ–π —Ç—Ä—é–∫, —á—Ç–æ–±—ã Telegram –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞–ª –≤—å—é
                setTimeout(() => window.scrollTo({ top: 0 }), 50);
            }
        } catch (_) {
            // Fallback –±–µ–∑ smooth
            window.scrollTo(0, 0);
        }
    }
    
    escapeHtml(text) {
        if (!text) return '';
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    // –ö—Ä–∞—Å–∏–≤–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç JSON-–º–∞—Å—Å–∏–≤–æ–º –∏–ª–∏ —Å \n
    formatDescription(raw) {
        if (!raw) return '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
        try {
            const maybeParsed = typeof raw === 'string' ? JSON.parse(raw) : raw;
            if (Array.isArray(maybeParsed)) {
                return maybeParsed
                    .filter(Boolean)
                    .map(p => `<p>${this.escapeHtml(String(p))}</p>`) 
                    .join('');
            }
            if (typeof maybeParsed === 'object' && maybeParsed !== null) {
                return `<pre>${this.escapeHtml(JSON.stringify(maybeParsed, null, 2))}</pre>`;
            }
        } catch (_) {
            // not JSON, fall back to plain text handling
        }
        // –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞: –∑–∞–º–µ–Ω–∏–º –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫ –Ω–∞ <br>
        return this.escapeHtml(String(raw)).replace(/\n/g, '<br>');
    }

    async fetchProductImage(name, category) {
        try {
            const url = new URL(`${API_BASE}/api/product-image`);
            url.searchParams.set('name', name);
            if (category) url.searchParams.set('category', category);
            const res = await fetch(url.toString());
            if (!res.ok) return null;
            const data = await res.json();
            return data.image_url || null;
        } catch (_) {
            return null;
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    new DreametechApp();
});